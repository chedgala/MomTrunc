sva <- svd(A)
if (min(sva$d)>=0){
Asqrt <- sva$u%*%diag(sqrt(sva$d))%*%t(sva$v)  # svd e decomposi??o espectral
}else{
stop("Matrix square root is not defined")
}
}
return(as.matrix(Asqrt))
}
algo = "rejection"
#mu  = c(1:p/10)
mu = rep(0,p)
lower = a = -mu - abs(rnorm(p))
upper = b = mu+1 +0.5*a + abs(rnorm(p)) + 3
# s  = matrix(rnorm(p^2),p,p)
# S = round(s%*%t(s),2)
# Sigma = S
Sigma = diag(p)
q = 0
a = rep(-Inf,p)
b = rep(Inf,p)
#not bounded in p-d positions
a[seq_len(d)] = lower[seq_len(d)]
b[seq_len(d)] = upper[seq_len(d)]
gen = tmvtnorm::rtmvt(n = n,mean = mu,sigma = Sigma,df = nu,lower = a,upper = b,algorithm = algo)
colMeans(gen)
var(gen)
# Running several times to increase the precision
value81 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
value82 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
value83 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
value84 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
value85 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
value86 = meanvarTMD(a,b,mu,Sigma,nu = nu,dist = "t")
mreal = (value81$mean + value82$mean + value83$mean + value84$mean + value85$mean + value86$mean)/6
varreal = (value81$varcov + value82$varcov + value83$varcov + value84$varcov + value85$varcov + value86$varcov)/6
varreal = varreal[lower.tri(varreal, diag = TRUE)]
##########################
i = 1
pc2 = (p*(p+1)/2)
chain = matrix(NA,p + pc2,n)
meanvec = gen[1,]
varcov = quadmat  = gen[1,]%*%t(gen[1,])
chain[1:p,i] = meanvec
chain[-(1:p),i] = varcov[lower.tri(varcov, diag = TRUE)]
for(i in 2:n){
meanvec = (meanvec*(i-1) + gen[i,])/i
quadmat = quadmat + gen[i,]%*%t(gen[i,])
varcov = (quadmat - i*meanvec%*%t(meanvec))/(i-1)
chain[1:p,i] = meanvec
chain[-(1:p),i] = varcov[lower.tri(varcov, diag = TRUE)]
}
meanvec; colMeans(gen)
chain[-(1:p),n]; var(gen)[lower.tri(var(gen), diag = TRUE)]
##########################
# Plot mean elements ------------------------------------------------------
plots <- list()
for(i in 1:p){
plots[[i]] = autoplot(as.zoo(chain[i,]), geom = "line")+
ylim(mreal[i]-0.08,mreal[i]+0.08) +
geom_hline(yintercept=mreal[i],linetype="solid", color = "blue",size = 1)  +
xlab("sample size") +
ylab(bquote(hat(mu)[.(i)]))+ theme_bw()
}
do.call("grid.arrange",c(plots, ncol=1,nrow=p))
# Plot varcov elements ------------------------------------------------------
index = expand.grid(1:p,1:p)
index = paste0(index$Var2,index$Var1)
imat = matrix(1:(p*p),p,p)
ivec = imat[lower.tri(imat, diag = TRUE)]
index = index[ivec]
plots <- list()
for(i in imat[upper.tri(imat)]){
plots[[i]] = ggplot() + theme_void()
}
for(j in 1:pc2){
plots[[ivec[j]]] = autoplot(as.zoo(chain[p+j,]), geom = "line")+
#ylim(varreal[j]-0.08,varreal[j]+0.08) +
geom_hline(yintercept=varreal[j],linetype="solid", color = "blue",size = 1)  +
xlab("sample size") +
ylab(bquote(hat(sigma)[.(index[j])]))+ theme_bw()
}
do.call("grid.arrange",c(plots, ncol=p,nrow=p))
}
library(MomTrunc)
library(tmvtnorm)
set.seed(1)
mu <- c(-0.5, 0, 1)
Sigma <- diag(c(1, 0.5, 0.3))
lower <- c(-1, -0.5, -0.7)
upper <- c(0.5, 0.8, 2)
x <- rtmvnorm(n = 1e5, mean = mu, sigma = Sigma, lower = lower, upper = upper)
m1 <- momentsTMD(kappa = c(1, 1, 1),
lower = lower,
upper = upper,
mu = mu,
Sigma = Sigma,
dist = "normal")
m2 <- meanvarTMD(lower = lower,
upper = upper,
mu = mu,
Sigma = Sigma,
dist = "normal")
m1[2,]
m2$mean[1,]
mean(x[,1])
detach(MomTrunc)
detach("MomTrunc")
dettach("MomTrunc")
plot(1:100,exp(-1:100))
plot(1:100,exp(-1:100))
plot(1:100,exp(-c(1:100)))
load("C:/Users/cgala/Downloads/envi_tsmec.RData")
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 200,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
LL
LU
Ns
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
traceback()
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
lower
upper
deltaa
delta
corr
sigma
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 250,precision = 1e-06)
as.vector(LL1c)
as.vector(LU1c)
as.matrix(Sc0)
as.vector(muiic)
rep(0,
length(muiic))
nu
MomTrunc::pmvST(lower = as.vector(LL1c), upper = as.vector(LU1c),
mu = as.vector(muiic), Sigma = as.matrix(Sc0), lambda = rep(0,
length(muiic)), nu = nu, log2 = FALSE)
lower <- rec[, "lower"]
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 25,precision = 1e-06)
tsmec(y = y,cc = cc,x = x,z = z,nj = nj,tt = tt,ttc = ttc,
LL = LL,LU = LU,Ns = Ns,initial = initial,struc = "ar",
lambda.fixed = FALSE,nu.fixed = FALSE,iter.max = 1,precision = 1e-06)
MomTrunc::pmvST(lower = as.vector(LL1c), upper = as.vector(LU1c),
mu = as.vector(muiic), Sigma = as.matrix(Sc0), lambda = rep(0,
length(muiic)), nu = nu, log2 = FALSE)
44*86
library(MomTrunc)
dmvESN(x = -1,mu = 2,Sigma = 5,lambda = -2,tau = 0.5)
rmvESN(n = 100,mu = 2,Sigma = 5,lambda = -2,tau = 0.5)
pmvESN(lower = -5,upper = 2,mu = 2,Sigma = 5,lambda = -2,tau = 0.5)
# Multivariate ESN case
mu = c(0.1,0.2,0.3,0.4)
Sigma = matrix(data = c(1,0.2,0.3,0.1,0.2,1,0.4,-0.1,0.3,
0.4,1,0.2,0.1,-0.1,0.2,1),
nrow = length(mu),ncol = length(mu),byrow = TRUE)
lambda = c(-2,0,1,2)
tau = 1
dmvESN(x = c(-2,-1,0,1),mu,Sigma,lambda,tau)#vector
dmvESN(x = matrix(rnorm(4*10),ncol = 4,byrow = TRUE),mu,Sigma,lambda,tau)#matrix
rmvESN(n = 100,mu,Sigma,lambda,tau)
pmvESN(lower = rep(-Inf,4),upper = c(-1,0,2,5),mu,Sigma,lambda,tau)
# Truncated case
# First two moments
a = c(-0.8,-0.7,-0.6) #lower bound
b = c(0.5,0.6,0.7) #upper bound
mu = c(0.1,0.2,0.3)
Sigma = matrix(data = c(1,0.2,0.3,0.2,1,0.4,0.3,0.4,1),
nrow = length(mu),ncol = length(mu),byrow = TRUE)
meanvarTMD(a,b,mu,Sigma,dist="normal")
meanvarTMD(a,b,mu,Sigma,dist = "t",nu = 4)
meanvarTMD(a,b,mu,Sigma,lambda = c(-2,0,1),dist = "SN")
meanvarTMD(a,b,mu,Sigma,lambda = c(-2,0,1),tau = 1,dist = "ESN")
# Arbitrary moment (2,0,1)
momentsTMD(kappa = c(2,0,1),a,b,mu,Sigma,dist="normal")
momentsTMD(kappa = c(2,0,1),a,b,mu,Sigma,dist = "t",nu = 7)
momentsTMD(kappa = c(2,0,1),a,b,mu,Sigma,lambda = c(-2,0,1),dist = "SN")
momentsTMD(kappa = c(2,0,1),a,b,mu,Sigma,lambda = c(-2,0,1),tau = 1,dist = "ESN")
# Folded ESN case
meanvarFMD(mu,Sigma,lambda = c(-2,0,1),tau = 1,dist = "ESN")
momentsFMD(kappa = c(2,0,1),mu,Sigma,lambda = c(-2,0,1),tau = 1,dist = "ESN")
cdfFMD(x = c(0.5,0.2,1.0,1.3),mu,Sigma,lambda = c(-2, 0,2,1),tau = 1,dist = "ESN")
cdfFMD(x = c(0.5,0.2,1.0,1.3),mu,Sigma,lambda = c(-2,0,2,1),tau = 1,dist = "ESN")
mu
cdfFMD(x = c(0.5,0.2,1.3),mu,Sigma,lambda = c(-2,0,1),tau = 1,dist = "ESN")
rm(list=ls())
library(MomTrunc)
library(TTmoment)
LL1 = c(-Inf, -Inf, -Inf, -Inf, -Inf)
LU1 = c(1.69897, 1.69897, 1.69897, 1.69897, 1.69897)
muii = c(3.851267, 3.997886, 4.224774, 4.379260, 4.373449)
SIGMA = matrix(c(9.598875, 9.471909, 9.223129, 8.862488, 8.516343,
9.471909, 9.598875, 9.346669, 8.981061, 8.630150,
9.223129, 9.346669, 9.598875, 9.223129, 8.862488,
8.862488, 8.981061, 9.223129, 9.598875, 9.223129,
8.516343, 8.630150, 8.862488, 9.223129, 9.598875), nrow = 5, ncol=5, byrow = TRUE)
nu = 50
length(LL1); length(LU1); length(muii); dim(SIGMA)
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::MCmeanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::MCmeanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
R
nu
bs
lower
upper
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
traceback()
lower = as.vector(LL1)
upper=as.vector(LU1)
mu = as.vector(muii)
Sigma = as.matrix((nu/(nu + 2))*SIGMA)
nu=(nu+2)
dist = "t"
sapply( list.files("C:\Users\cgala\Dropbox\Academic\Packages\MomTrunc\R", full.names=TRUE), source )
sapply( list.files("C:/Users/cgala/Dropbox/Academic/Packages/MomTrunc/R", full.names=TRUE), source )
traceback()
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
upper
b = upper
S = Sigma
omega = FALSE
b
meanvarT.Lin.RC(b = upper,mu = mu,S = Sigma,nu=nu,omega)
ss = sqrt(diag(S))
ss = sqrt(diag(S))
bs = (b-mu)/ss
R = S/(ss%*%t(ss))
M=TT.moment.RC(R = R,nu,upper=bs)
M
M=TT.moment.RC(R = R,nu,upper=bs)
M$varcov = M$EYY -  M$mean%*%t(M$mean)
M$mean = ss*M$mean + mu
M$varcov = diag(ss)%*%M$varcov%*%diag(ss)
M$EYY = M$varcov + M$mean%*%t(M$mean)
if(omega){
return(M)
}else{
return(list(mean = M$mean, EYY = M$EYY, varcov = M$varcov))
}
M$mean
EYY = M$EYY
varcov = M$varcov
EYY
varcov
MomTrunc::MCmeanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
sapply( list.files("C:/Users/cgala/Dropbox/Academic/Packages/MomTrunc/R", full.names=TRUE), source )
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
library(MomTrunc)
library(MomTrunc)
library(TTmoment)
LL1 = c(-Inf, -Inf, -Inf, -Inf, -Inf)
LU1 = c(1.69897, 1.69897, 1.69897, 1.69897, 1.69897)
muii = c(3.851267, 3.997886, 4.224774, 4.379260, 4.373449)
SIGMA = matrix(c(9.598875, 9.471909, 9.223129, 8.862488, 8.516343,
9.471909, 9.598875, 9.346669, 8.981061, 8.630150,
9.223129, 9.346669, 9.598875, 9.223129, 8.862488,
8.862488, 8.981061, 9.223129, 9.598875, 9.223129,
8.516343, 8.630150, 8.862488, 9.223129, 9.598875), nrow = 5, ncol=5, byrow = TRUE)
nu = 50
length(LL1); length(LU1); length(muii); dim(SIGMA)
MomTrunc::MCmeanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
MomTrunc::MCmeanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t",n = 10^6)
MomTrunc::meanvarTMD(lower = as.vector(LL1),upper=as.vector(LU1),mu = as.vector(muii), Sigma = as.matrix((nu/(nu + 2))*SIGMA),nu=(nu+2),dist = "t")
library(MomTrunc)
TT_GS_sp
set.seed(1)
mu <- c(-0.5, 0, 1)
Sigma <- diag(c(1, 0.5, 0.3))
lower <- c(-1, -0.5, -0.7)
upper <- c(0.5, 0.8, 2)
x <- rtmvnorm(n = 1e5, mean = mu, sigma = Sigma, lower = lower, upper = upper)
remove.packages("MomTrunc")
library(MomTrunc)
?pnorm
library(MomTrunc)
remove.packages("MomTrunc")
theta = 3
runif(n = 10,min = 0,max = 3)
runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 10,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
muestra = runif(n = 100,min = 0,max = 3)
max(muestra)
alpha = 2
beta = 4
x = rgamma(n = 1e6,shape = alpha,scale = beta)
alpha = 2
beta = 4
x = rgamma(n = 1e6,shape = alpha,scale = beta)
hist(x)
hist(x,breaks = 50)
alpha = 4
beta = 8
x = rgamma(n = 1e6,shape = alpha,scale = beta)
hist(x,breaks = 50)
xbar = mean(x)
sn2  = var(x)*(n-1)/n
n = 1e6
xbar = mean(x)
sn2  = var(x)*(n-1)/n
xbar
sn2
alpha.est = xbar^2/sn2
beta.est = sn2/xbar
data.frame(parametros = c(alpha,beta),estimaciones = c(alpha.est,beta.est))
data.frame(parametros = c("alpha","beta"),valor = c(alpha,beta),
estimaciones = c(alpha.est,beta.est))
data.frame(parametros = c("alpha","beta"),real = c(alpha,beta),
estimaciones = c(alpha.est,beta.est))
data.frame(parametros = c("alpha","beta"),real = c(alpha,beta),
estimación = c(alpha.est,beta.est))
data.frame(parametro = c("alpha","beta"),real = c(alpha,beta),
estimación = c(alpha.est,beta.est))
fitdistrplus::fitdist(data = x,distr = "gamma")
1/0.1251383
ajuste = fitdistrplus::fitdist(data = x,distr = "gamma")
fitdistrplus::denscomp(ajuste)
n = 1e5
alpha = 4
beta = 8
x = rgamma(n,shape = alpha,scale = beta)
hist(x,breaks = 50)
xbar = mean(x)
sn2  = var(x)*(n-1)/n
alpha.est = xbar^2/sn2
beta.est = sn2/xbar
data.frame(parametro = c("alpha","beta"),real = c(alpha,beta),
estimación = c(alpha.est,beta.est))
ajuste = fitdistrplus::fitdist(data = x,distr = "gamma")
1/ajuste$estimate[2]
fitdistrplus::denscomp(ajuste)
library(ARCensReg)
install.packages("ARCensReg")
library(ARCensReg)
?ARCensReg
plot.ts(phosphorus$lP)
data(phosphorus)
plot.ts(phosphorus$lP)
lines(phosphorus$lcl,col=2,lty=2)
#Proportion of censoring
prop.table(table(phosphorus$cc))
#A censored regression model
x = cbind(1,phosphorus$lQ)
miss =  which(is.na(phosphorus$lP))
AR_reg = ARCensReg(phosphorus$cc,phosphorus$lP,x,cens='left',miss=miss,p=1,tol=.001)
AR_reg$yest
plot.ts(AR_reg$yest)
x
rev(1:nrow(x))
xrev = x[rev(1:nrow(x)),]
rr = rev(1:nrow(x))
rr = rev(1:nrow(x))
ccrev = phosphorus$cc[rr]
lPrev = phosphorus$lP[rr]
xrev = x[rr,]
missrev = miss[rr]
ccrev
lPrev
xrev
missrev
ccrev
missrev
miss
AR_reg_rev = ARCensReg(ccrev,lPrev,xrev,cens='left',
miss=missrev,p=1,tol=.001)
miss
missrev = which(is.na(lPrev))
missrev
plot.ts(lPrev)
lines(rev(phosphorus$lcl),col=2,lty=2)
AR_reg_rev = ARCensReg(ccrev,lPrev,xrev,cens='left',
miss=missrev,p=1,tol=.001)
plot.ts(lPrev)
plot.ts(AR_reg_rev$yest)
plot.ts(lPrev)
plot.ts(lPrev,AR_reg_rev$yest)
plot.ts(lPrev)
plot.ts(AR_reg_rev$yest,add = TRUE)
plot.ts(lPrev)
plot.ts(lPrev)
lines(AR_reg_rev$yest,add = TRUE)
plot.ts(lPrev)
plot.ts(lPrev)
lines(AR_reg_rev$yest,col=3)
acf(AR_reg_rev$yest)
AR_reg_rev3 = ARCensReg(ccrev,lPrev,xrev,cens='left',
miss=missrev,p=3,tol=.001)
rbind(AR_reg_rev$res$theta,
AR_reg_rev$res$theta)
rbind(AR_reg$res$theta,
AR_reg_rev$res$theta)
theta
AR_reg$res
AR_reg_rev$res
AR_reg_rev3$res
AR_reg_rev$res$AIC
AR_reg_rev3$res$AIC
AR_reg_rev$res$AICcorr
AR_reg_rev3$res$AICcorr
plot.ts(lPrev)
lines(AR_reg_rev3$yest,col=3)
rbind(AR_reg$res$theta,
AR_reg_rev$res$theta)
AR_reg
plot.ts(lPrev)
lines(AR_reg_rev3$yest)
lines(lPrev$yest,col=2)
lines(lPrev,col=2)
plot.ts(lPrev)
lines(AR_reg_rev3$yest,col=2)
lines(lPrev)
2
2
pkgbuild::has_rtools(debug = TRUE)
R.version.string
R.version.string
